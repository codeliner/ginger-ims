<?php
namespace GingerORM\Repository;

use Cl\Test\DoctrineTestCase;
/**
 * Test class for ConnectorElementRepository.
 * Generated by PHPUnit on 2013-04-08 at 18:57:59.
 */
class ConnectorElementRepositoryTest extends DoctrineTestCase
{
    /**
     * @var ConnectorElementRepository
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->createEntitySchema('GingerORM\Entity\ConnectorElement');
        $this->object = $this->getTestEntityManager()->getRepository('GingerORM\Entity\ConnectorElement');
        $this->object->setServiceLocator(self::getApplication()->getServiceManager());
    }

    /**
     * @covers GingerORM\Repository\ConnectorElementRepository::registerMapper
     */
    public function testRegisterMapper()
    {
        $mapperId = $this->object->registerMapper('testmodule', 'testmapper', 'MockObject\Mapper', '/testmapper');

        $mapper = $this->object->getMapper($mapperId);

        $this->assertInstanceOf('MockObject\Mapper', $mapper);
        $this->assertEquals($mapperId, $mapper->getId());
        $this->assertEquals('testmapper', $mapper->getName());
        $this->assertEquals('/testmapper', $mapper->getLink());
    }

    /**
     * @covers GingerORM\Repository\ConnectorElementRepository::registerSource
     */
    public function testRegisterSource()
    {
        $sourceId = $this->object->registerSource('testmodule', 'testsource', 'MockObject\Source', '/testsource');

        $source = $this->object->getSource($sourceId);

        $this->assertInstanceOf('MockObject\Source', $source);
        $this->assertEquals($sourceId, $source->getId());
        $this->assertEquals('testsource', $source->getName());
        $this->assertEquals('/testsource', $source->getLink());
    }

    /**
     * @covers GingerORM\Repository\ConnectorElementRepository::registerTarget
     */
    public function testRegisterTarget()
    {
        $targetId = $this->object->registerTarget('testmodule', 'testtarget', 'MockObject\Target', '/testtarget');

        $target = $this->object->getTarget($targetId);

        $this->assertInstanceOf('MockObject\Target', $target);
        $this->assertEquals($targetId, $target->getId());
        $this->assertEquals('testtarget', $target->getName());
        $this->assertEquals('/testtarget', $target->getLink());
    }

    /**
     * @expectedException Ginger\Model\Connector\Exception\ElementNameExistException
     */
    public function testTargettNameExistException()
    {
        $targetId = $this->object->registerTarget('testmodule', 'testtarget', 'MockObject\Target', '/testtarget');
        $targetId = $this->object->registerTarget('testmodule', 'testtarget', 'MockObject\Target', '/testtarget');
    }

    /**
     * @expectedException Ginger\Model\Connector\Exception\ElementNameExistException
     */
    public function testSourcetNameExistException()
    {
        $sourceId = $this->object->registerSource('testmodule', 'testsource', 'MockObject\Source', '/testsource');
        $sourceId = $this->object->registerSource('testmodule', 'testsource', 'MockObject\Source', '/testsource');
    }

    /**
     * @expectedException Ginger\Model\Connector\Exception\ElementNameExistException
     */
    public function testMappertNameExistException()
    {
        $mapperId = $this->object->registerMapper('testmodule', 'testmapper', 'MockObject\Mapper', '/testmapper');
        $mapperId = $this->object->registerMapper('testmodule', 'testmapper', 'MockObject\Mapper', '/testmapper');
    }

    public function testSetServiceLocator()
    {
        $sourceId = $this->object->registerSource('testmodule', 'testsource', 'MockObject\Source', '/testsource');
        $source = $this->object->getSource($sourceId);

        $this->assertInstanceOf('Zend\ServiceManager\ServiceLocatorInterface', $source->getServiceLocator());
    }

    public function testUnregisterElement()
    {
        $sourceId = $this->object->registerSource('testmodule', 'testsource', 'MockObject\Source', '/testsource');
        $source = $this->object->getSource($sourceId);

        $this->assertInstanceOf('MockObject\Source', $source);

        $this->object->unregisterSource($sourceId);

        $this->getTestEntityManager()->clear();

        $source = $this->object->getSource($sourceId);

        $this->assertNull($source);
    }
}

?>
