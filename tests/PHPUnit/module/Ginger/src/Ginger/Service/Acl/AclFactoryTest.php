<?php
namespace Ginger\Service\Acl;

use Zend\Permissions\Acl\Acl;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-20 at 23:43:16.
 */
class AclFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Acl
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {        
        $sl = new \MockObject\ServiceLocatorMock();
        
        $jobLoader = new \MockObject\JobLoader();
        $jobLoader->setJobNames(array(
            'Article Transfer',
            'Übertrag'
        ));
        
        $permsProvider = new \MockObject\PermissionProviderMock();
        $permsProvider->setPermissions(array(
            '1' => array(
                'is_admin' => true
            ),
            '2' => array(
                'is_admin' => false,
                'permissions' => array(
                    'Übertrag' => array(
                        'read'
                    ),
                    'Article Transfer' => array(
                        'read',
                        'write',
                        'execute'
                    )
                ),
            )
        ));
        
        $sl->register('job_loader', $jobLoader);
        
        $sl->register('acl_permission_provider', $permsProvider);
        
        $aclFactory = new AclFactory();
        
        $this->object = $aclFactory->createService($sl);
    }

    /**
     * @covers Ginger\Service\Acl\AclFactory::createService
     */
    public function testCreateService()
    {
        $this->assertInstanceOf('Zend\Permissions\Acl\Acl', $this->object);
    }
    
    /**
     * @covers Ginger\Service\Acl\AclFactory::createService
     */
    public function testAdminFullAccess()
    {
        $this->assertTrue($this->object->isAllowed('user_1', 'Article Transfer', 'write'));
    }
    
    public function testAllowRead()
    {
        $this->assertTrue($this->object->isAllowed('user_2', 'Übertrag', 'read'));
    }
    
    public function testDenyWrite()
    {
        $this->assertFalse($this->object->isAllowed('user_2', 'Übertrag', 'write'));
    }
    
    public function testAllowExecute()
    {
        $this->assertTrue($this->object->isAllowed('user_2', 'Article Transfer', 'execute'));
    }
}
