<?php
namespace Ginger\Model\Configuration;

use MockObject\Source;
use MockObject\SourceLoader;
use MockObject\Target;
use MockObject\TargetLoader;
use MockObject\Mapper;
use MockObject\MapperLoader;
use MockObject\ValueChangeFeature;
use MockObject\FeatureLoader;
/**
 * Test class for ConnectorConfiguration.
 * Generated by PHPUnit on 2013-04-04 at 23:01:35.
 */
class ConnectorConfigurationTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ConnectorConfiguration
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ConnectorConfiguration;
    }

    /**
     * @covers Ginger\Model\Configuration\ConnectorConfiguration::serialize
     */
    public function testSerialize()
    {
        $sourceLoader = new SourceLoader();
        $source = $sourceLoader->getSource(1);
        $source->setOptions(array('opt1' => 'foo'));

        $targetLoader = new TargetLoader();
        $target = $targetLoader->getTarget(1);
        $target->setOptions(array('opt2' => 'bar'));

        $mapperLoader = new MapperLoader();
        $mapper = $mapperLoader->getMapper(1);
        $mapper->setOptions(array('opt3' => 'baz'));

        $featureLoader = new FeatureLoader();
        $feature = $featureLoader->getFeature(1);
        $fOptions = $feature->getOptions();
        $fOptions['attributes_to_alter'][] = 'address::zip';
        $feature->setOptions($fOptions);
        $this->object->setSource($source);
        $this->object->setTarget($target);
        $this->object->setSourceLoader($sourceLoader);
        $this->object->setTargetLoader($targetLoader);
        $this->object->setMapperLoader($mapperLoader);
        $this->object->setFeatureLoader($featureLoader);

        $sConfig = $this->object->serialize();

        $checkConfig = new ConnectorConfiguration();

        $checkConfig->setSourceLoader($sourceLoader);
        $checkConfig->setTargetLoader($targetLoader);
        $checkConfig->setMapperLoader($mapperLoader);
        $checkConfig->setFeatureLoader($featureLoader);

        $checkConfig->unserialize($sConfig);

        $this->assertEquals('foo', $checkConfig->getSource()->getOptions()['opt1']);
        $this->assertEquals('bar', $checkConfig->getTarget()->getOptions()['opt2']);

        $this->object->setMapper($mapper);
        $this->object->addFeature($feature);

        $sConfig = $this->object->serialize();

        $checkConfig = new ConnectorConfiguration();

        $checkConfig->setSourceLoader($sourceLoader);
        $checkConfig->setTargetLoader($targetLoader);
        $checkConfig->setMapperLoader($mapperLoader);
        $checkConfig->setFeatureLoader($featureLoader);

        $checkConfig->unserialize($sConfig);

        $this->assertEquals('baz', $checkConfig->getMapper()->getOptions()['opt3']);
        $this->assertEquals(
            array('name','address::city','address::zip'),
            $checkConfig->getFeatures()[0]->getOptions()['attributes_to_alter']
        );
    }

    public function testRemoveFeature()
    {
        $featureLoader = new FeatureLoader();
        $feature = $featureLoader->getFeature(1);

        $this->object->addFeature($feature);

        $this->assertEquals(1, count($this->object->getFeatures()));

        $this->object->removeFeature($feature);

        $this->assertEquals(0, count($this->object->getFeatures()));
    }
}

?>
