<?php
namespace Ginger\Model\Directory;

use Cl\Filesystem\DirectoryManager;
use Ginger\Model\File;
/**
 * Test class for SourceDirectory.
 * Generated by PHPUnit on 2013-05-29 at 11:06:59.
 */
class SourceDirectoryTest extends \PHPUnit_Framework_TestCase
{
    const DIR = "data/dir-test";
    const PATTERN = '/^[a-z]+\.json$/';

    /**
     * @var SourceDirectory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        mkdir(static::DIR);

        file_put_contents(static::DIR . '/an_invalid.txt', 'invalid data');

        File\WriterFactory::toFile(static::DIR . '/first.json', array('name' => 'first'));
        File\WriterFactory::toFile(static::DIR . '/second.json', array('name' => 'second'));
        File\WriterFactory::toFile(static::DIR . '/third.json', array('name' => 'third'));

        $this->object = new SourceDirectory(1, "SourceDirectory", "#", "Ginger.Application");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        DirectoryManager::recursiveRemoveDir(static::DIR);
    }

    /**
     * @covers Ginger\Model\Directory\SourceDirectory::getOptions
     */
    public function testGetOptions()
    {
        $check = array(
            'source_dir' => 'inbox',
            'file_pattern' => '/^.+\..+$/',
            'iterator_mode' => 'file'
        );

        $this->assertEquals($check, $this->object->getOptions());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $check = array(
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
            'iterator_mode' => DirectoryIterator::MODE_DATA
        );

        $this->assertEquals($check, $this->object->getOptions());
    }

    /**
     * @covers Ginger\Model\Directory\SourceDirectory::getDataType
     */
    public function testGetDataType()
    {
        $this->assertEquals(SourceDirectory::DATA_TYPE_NOT_DEFINED, $this->object->getDataType());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $this->assertEquals(SourceDirectory::DATA_TYPE_DOCUMENT_STRUCTURE, $this->object->getDataType());
    }

    /**
     * @covers Ginger\Model\Directory\SourceDirectory::getDataStructure
     */
    public function testGetDataStructure()
    {
        $this->assertNull($this->object->getDataStructure());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => '/^no-matching-pattern/',
        ));

        $this->assertNull($this->object->getDataStructure());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $this->assertEquals(array(array('name' => 'name', 'type' => 'string')), $this->object->getDataStructure());
    }

    /**
     * @covers Ginger\Model\Directory\SourceDirectory::getItemCount
     */
    public function testGetItemCount()
    {
        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $this->assertEquals(3, $this->object->getItemCount());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => '/^no-matching-pattern/',
        ));

        $this->assertEquals(0, $this->object->getItemCount());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_FILE,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $this->assertEquals(3, $this->object->getItemCount());

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_FILE,
            'source_dir' => static::DIR,
            'file_pattern' => '/^no-matching-pattern/',
        ));

        $this->assertEquals(0, $this->object->getItemCount());
    }

    /**
     * @covers Ginger\Model\Directory\SourceDirectory::getData
     */
    public function testGetData()
    {
        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_FILE,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $filenames = array();

        foreach ($this->object->getData() as $file) {
            $this->assertInstanceOf('Ginger\Model\File\File', $file);
            $filenames[] = $file->getFilename();
        }

        $check = array(
            'first.json',
            'second.json',
            'third.json'
        );

        $this->assertEquals($check, $filenames);

        $this->object->setOptions(array(
            'iterator_mode' => DirectoryIterator::MODE_DATA,
            'source_dir' => static::DIR,
            'file_pattern' => static::PATTERN,
        ));

        $dataCollection = array();

        foreach ($this->object->getData() as $data) {
            $dataCollection[] = $data;
        }

        $check = array(
            array('name' => 'first'),
            array('name' => 'second'),
            array('name' => 'third')
        );

        $this->assertEquals($check, $dataCollection);
    }
}

?>
