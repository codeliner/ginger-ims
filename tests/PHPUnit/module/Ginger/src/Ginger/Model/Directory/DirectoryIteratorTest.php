<?php
namespace Ginger\Model\Directory;

use Cl\Filesystem\DirectoryManager;
use Ginger\Model\File;
/**
 * Test class for DirectoryIterator.
 * Generated by PHPUnit on 2013-05-29 at 09:59:54.
 */
class DirectoryIteratorTest extends \PHPUnit_Framework_TestCase
{
    const DIR = "data/dir-iterator-test";

    /**
     * @var DirectoryIterator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        mkdir(static::DIR);

        file_put_contents(static::DIR . '/an_invalid.txt', 'invalid data');

        File\WriterFactory::toFile(static::DIR . '/first.json', array('name' => 'first'));
        File\WriterFactory::toFile(static::DIR . '/second.json', array('name' => 'second'));
        File\WriterFactory::toFile(static::DIR . '/third.json', array('name' => 'third'));
        $this->object = new DirectoryIterator(
            static::DIR,
            AbstractDirectory::getFilenames(static::DIR, '/^[a-z]+\.json$/')
            );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        DirectoryManager::recursiveRemoveDir(static::DIR);
    }

    /**
     * @covers Ginger\Model\Directory\DirectoryIterator::current
     */
    public function testCurrent()
    {
        $file = $this->object->current();

        $this->assertEquals('first.json', $file->getFilename());
    }

    public function testCurrentData()
    {
        $iterator = new DirectoryIterator(
            static::DIR,
            AbstractDirectory::getFilenames(static::DIR, '/^[a-z]+\.json$/'),
            DirectoryIterator::MODE_DATA
            );

        $this->assertEquals(array('name' => 'first'), $iterator->current());
    }

    /**
     * @covers Ginger\Model\Directory\DirectoryIterator::key
     */
    public function testKey()
    {
        $this->object->next();
        $this->assertEquals(1, $this->object->key());
    }

    /**
     * @covers Ginger\Model\Directory\DirectoryIterator::rewind
     */
    public function testRewind()
    {
        $this->object->next();
        $this->assertEquals(1, $this->object->key());
        $this->object->rewind();
        $this->assertEquals(0, $this->object->key());
    }

    /**
     * @covers Ginger\Model\Directory\DirectoryIterator::valid
     */
    public function testValid()
    {
        $this->assertTrue($this->object->valid());
        $this->object->next();
        $this->assertTrue($this->object->valid());
        $this->object->next();
        $this->assertTrue($this->object->valid());
        $this->object->next();
        $this->assertFalse($this->object->valid());
    }

    public function testLoop()
    {
        $filenames = array();
        foreach($this->object as $file) {
            $filenames[] = $file->getFilename();
        }

        $check = array(
            'first.json',
            'second.json',
            'third.json'
        );

        $this->assertEquals($check, $filenames);
    }
}

?>
