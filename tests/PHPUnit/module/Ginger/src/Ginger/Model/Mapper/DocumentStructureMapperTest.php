<?php
namespace Ginger\Model\Mapper;

use MockObject\DummyDocumentTarget;
use MockObject\DummyDocumentSource;
use Ginger\Model\Connector\ConnectorEvent;
/**
 * Test class for DocumentStructureMapper.
 * Generated by PHPUnit on 2013-05-28 at 07:06:46.
 */
class DocumentStructureMapperTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var DocumentStructureMapper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DocumentStructureMapper(3, 'documentmapper', '#', 'MockObject');
    }

    /**
     * @covers Ginger\Model\Mapper\DocumentStructureMapper::mapItem
     */
    public function testMapItem()
    {
        $e = new ConnectorEvent(ConnectorEvent::EVENT_MAP_ITEM);

        $item = array(
            'autor' => array(
                'vorname' => 'Alex',
                'nachname' => 'Miertsch',
                'artikel' => array(
                    array(
                        'ueberschrift' => 'eC.Connect introduction',
                        'kommentare' => array(
                            array(
                                'id' => 'a1_k1',
                                'autor' => array(
                                    'vorname' => 'max',
                                    'nachname' => 'mustermann'
                                )
                            ),
                            array(
                                'id' => 'a1_k2',
                                'autor' => array(
                                    'vorname' => 'hans',
                                    'nachname' => 'wurst'
                                )
                            )
                        )
                    ),
                    array(
                        'ueberschrift' => 'eC.Connect use cases',
                        'kommentare' => array(
                            array(
                                'id' => 'a2_k1',
                                'autor' => array(
                                    'vorname' => 'paul',
                                    'nachname' => 'panter'
                                )
                            ),
                            array(
                                'id' => 'a2_k2',
                                'autor' => array(
                                    'vorname' => 'hans',
                                    'nachname' => 'wurst'
                                )
                            )
                        )
                    )
                )
            )
        );

        $check = array(
            'author' => array(
                'firstname' => 'Alex',
                'lastname' => 'Miertsch',
                'articles' => array(
                    array(
                        'headline' => 'eC.Connect introduction',
                        'comments' => array(
                            array(
                                'id' => 'a1_k1',
                                'author' => array(
                                    'firstname' => 'max',
                                    'lastname' => 'mustermann'
                                )
                            ),
                            array(
                                'id' => 'a1_k2',
                                'author' => array(
                                    'firstname' => 'hans',
                                    'lastname' => 'wurst'
                                )
                            )
                        )
                    ),
                    array(
                        'headline' => 'eC.Connect use cases',
                        'comments' => array(
                            array(
                                'id' => 'a2_k1',
                                'author' => array(
                                    'firstname' => 'paul',
                                    'lastname' => 'panter'
                                )
                            ),
                            array(
                                'id' => 'a2_k2',
                                'author' => array(
                                    'firstname' => 'hans',
                                    'lastname' => 'wurst'
                                )
                            )
                        )
                    )
                )
            )
        );

        $this->object->setOptions(array(
            'mapping' => array(
                'autor::vorname' => 'author::firstname',
                'autor::nachname' => 'author::lastname',
                'autor::artikel::[]::ueberschrift' => 'author::articles::[]::headline',
                'autor::artikel::[]::kommentare::[]::id' => 'author::articles::[]::comments::[]::id',
                'autor::artikel::[]::kommentare::[]::autor::vorname' => 'author::articles::[]::comments::[]::author::firstname',
                'autor::artikel::[]::kommentare::[]::autor::nachname' => 'author::articles::[]::comments::[]::author::lastname',
            ),
            'disabled_keys' => array(),
        ));

        $e->setItem($item);
        $e->setSource(new DummyDocumentSource(1, 'dummysource', '#', 'MockObject'));
        $e->setTarget(new DummyDocumentTarget(2, 'dummytarget', '#', 'MockObject'));

        $checkItem = $this->object->mapItem($item, $e);

        $this->assertEquals($check, $checkItem);
    }
}
?>
