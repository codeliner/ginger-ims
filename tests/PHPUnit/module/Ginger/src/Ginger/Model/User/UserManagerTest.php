<?php
namespace Ginger\Model\User;

use Ginger\Job\Job;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-22 at 22:15:12.
 */
class UserManagerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var UserManager
     */
    protected $object;
    
    protected $permissionsLoader;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new UserManager;
        
        $userLoader = new \MockObject\UserLoaderMock();
        $userLoader->setUsersData(array(
            0 => array(
                'id' => 0,
                'apiKey' => '12345key',
                'secretKey' => '6789secret',
                'lastname' => 'mustermann',
                'firstname' => 'max',
                'email' => 'm.mustermann@company.com',
                'isAdmin' => false,
            )
        ));
        
        $this->object->setUserLoader($userLoader);
        
        $this->permissionsLoader = new \MockObject\UserPermissionsLoaderMock();
        
        $this->permissionsLoader->setPermissions(array(
            0 => array(
                'article transfer' => array(
                    'read' => true,
                    'write' => false,
                    'execute' => true
                ),
                'order sync' => array(
                    'read' => true,
                    'write' => true,
                    'execute' => false
                )
            )
        ));
        
        $this->object->setPermissionsLoader($this->permissionsLoader);
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::hasUsers
     */
    public function testHasUsers()
    {
        $this->assertTrue($this->object->hasUsers());
    }

    /**
     * @covers Ginger\Model\User\UserManager::getUser
     */
    public function testGetUser()
    {
        $user = $this->object->getUser(0);
        
        $this->assertInstanceOf('Ginger\Model\User\User', $user);
        
        $this->assertEquals(0, $user->getId());
        $this->assertEquals('12345key', $user->getApiKey());
        $this->assertEquals('6789secret', $user->getSecretKey());
        $this->assertEquals('mustermann', $user->getLastname());
        $this->assertEquals('max', $user->getFirstname());
        $this->assertEquals('m.mustermann@company.com', $user->getEmail());
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::setActiveUser
     * @covers Ginger\Model\User\UserManager::getActiveUser
     */
    public function testSetAndGetActiveUser()
    {
        $this->object->setActiveUser('12345key');
        
        $user = $this->object->getActiveUser();
        
        $this->assertInstanceOf('Ginger\Model\User\User', $user);
        
        $this->assertEquals(0, $user->getId());
        $this->assertEquals('12345key', $user->getApiKey());
        $this->assertEquals('6789secret', $user->getSecretKey());
        $this->assertEquals('mustermann', $user->getLastname());
        $this->assertEquals('max', $user->getFirstname());
        $this->assertEquals('m.mustermann@company.com', $user->getEmail());
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::saveUser
     */
    public function testSaveUser()
    {
        $newUserData = array(
            'apiKey' => '5555key',
            'secretKey' => '6666secret',
            'lastname' => 'Smith',
            'firstname' => 'Joe',
            'email' => 'j.smith@company.com'
        );
        
        $newUser = $this->object->saveUser($newUserData);
        
        $this->assertInstanceOf('Ginger\Model\User\User', $newUser);
        $this->assertEquals('5555key', $newUser->getApiKey());
        $this->assertEquals('6666secret', $newUser->getSecretKey());
        $this->assertEquals('Smith', $newUser->getLastname());
        $this->assertEquals('Joe', $newUser->getFirstname());
        $this->assertEquals('j.smith@company.com', $newUser->getEmail());
        
        $newUserId = $newUser->getId();
        
        $newUser->exchangeArray(array(
            'apiKey' => '5566key',
            'secretKey' => '6677secret',
            'lastname' => 'Doe',
            'firstname' => 'John',
            'email' => 'j.doe@company.com'
        ));
        
        $updatedUser = $this->object->saveUser($newUser);
        
        $this->assertEquals($newUserId, $updatedUser->getId());
        
        $this->assertEquals('5566key', $updatedUser->getApiKey());
        $this->assertEquals('6677secret', $updatedUser->getSecretKey());
        $this->assertEquals('Doe', $updatedUser->getLastname());
        $this->assertEquals('John', $updatedUser->getFirstname());
        $this->assertEquals('j.doe@company.com', $updatedUser->getEmail());
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::deleteUser
     * @expectedException \Ginger\Model\User\Exception\InvalidArgumentException
     */
    public function testDeleteUser()
    {
        $user = $this->object->getUser(0);
        
        $this->object->deleteUser($user);
        
        $this->assertEmpty($this->permissionsLoader->loadPermissions(0));
        
        $user = $this->object->getUser(0);
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::getUserPermissions
     */
    public function testGetUserPermissions()
    {
        $user = $this->object->getUser(0);
        
        $job = new Job('article transfer');
        
        $jobPermissions = $this->object->getUserPermissions($user, $job);
        
        $check = array(
            'read' => true,
            'write' => false,
            'execute' => true
        );
        
        $this->assertEquals($check, $jobPermissions);
        
        $allPermissions = $this->object->getUserPermissions($user);
        
        $checkAll = array(
            'article transfer' => array(
                'read' => true,
                'write' => false,
                'execute' => true
            ),
            'order sync' => array(
                'read' => true,
                'write' => true,
                'execute' => false
            )
        );
        
        $this->assertEquals($checkAll, $allPermissions);
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::updateUserPermissions
     */
    public function testUpdateUserPermissions()
    {
        $user = $this->object->getUser(0);
        
        $job = new Job('article transfer');
        
        $this->object->updateUserPermissions($user, $job, false, false, true);
        
        $permissions = $this->object->getUserPermissions($user, $job);
        
        $check = array(
            'read' => false,
            'write' => false,
            'execute' => true,
        );
        
        $this->assertEquals($check, $permissions);
    }
    
    /**
     * @covers Ginger\Model\User\UserManager::getPermissions
     */
    public function testGetPermissions()
    {
        $admin = $this->object->saveUser(array(
            'apiKey' => 'admin',
            'secret' => 'root',
            'lastname' => 'System',
            'firstname' => 'Simon',
            'email' => 's.system@company.com',
            'isAdmin' => true,
        ));
        
        $permissions = $this->object->getPermissions();
        
        $check = array(
            0 => array(
                'isAdmin' => false,
                'permissions' => array(
                    'article transfer' => array(
                        'read' => true,
                        'write' => false,
                        'execute' => true
                    ),
                    'order sync' => array(
                        'read' => true,
                        'write' => true,
                        'execute' => false
                    )
                )
            ),
            1 => array(
                'isAdmin' => true,
                'permissions' => array()
            )
        );
        
        $this->assertEquals($check, $permissions);
    }
}
