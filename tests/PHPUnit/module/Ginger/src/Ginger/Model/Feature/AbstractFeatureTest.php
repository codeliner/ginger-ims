<?php
namespace Ginger\Model\Feature;

use MockObject\ValueChangeFeature;
use MockObject\DocumentSource;
use Ginger\Model\Connector\ConnectorEvent;
/**
 * Test class for AbstractFeature.
 * Generated by PHPUnit on 2013-04-25 at 22:45:31.
 */
class AbstractFeatureTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var AbstractFeature
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ValueChangeFeature(1, 'ValueChangeFeature', '/value-change-feature', 'MockObject');
    }

    public function testMapDocumentStructure()
    {
        $item = array(
            'level1a' => array(
                'level2a' => 'value1',
                'level2b' => array(
                    'level3a' => 'value2',
                    'level3b' => array(
                        'value3',
                        'value4'
                    )
                )
            ),
            'level1b' => 'value5',
        );

        $check = array(
            'level1a' => array(
                'level2a' => 'value1-changed',
                'level2b' => array(
                    'level3a' => 'value2',
                    'level3b' => array(
                        'value3-changed',
                        'value4-changed'
                    )
                )
            ),
            'level1b' => 'value5',
        );

        $e = new ConnectorEvent(ConnectorEvent::EVENT_MAP_ITEM);
        $e->setItem($item);
        $e->setSource(new DocumentSource(2, 'DocumentSource', '/document-source', 'MockObject'));
        $this->object->setOptions(array(
            'site_to_alter' => 'source',
            'attributes_to_alter' => array(
                'level1a::level2a',
                'level1a::level2b::level3b'
            )
        ));
        $this->object->onMapItem($e);

        $this->assertEquals($check, $e->getItem());
    }

    public function testMoreData()
    {
        $item = array(
            'id' => 1,
            'name' => 'Ein Testartikel',
            'description' => 'Dies ist ein Testartikel mit möglichst vielen Attributen, um die Performance der recursiven Funktion zu testen.',
            'tags' => array(
                'test',
                'phpunit',
                'eCommerce',
                'array',
                'recursive'
            ),
            'categories' => array(
                array(
                    'name' => 'Möbel',
                    'childes' => array(
                        array(
                            'name' => 'Tische',
                            'childes' => array(
                                array(
                                    'name' => 'Esstische'
                                ),
                            )
                        ),
                        array(
                            'name' => 'Schränke',
                            'childes' => array(
                                array(
                                    'name' => 'Kommode'
                                )
                            )
                        )
                    )
                )
            ),
            'manufacturer' => array(
                'name' => 'Möbelfabrik',
                'address' => array(
                    'street' => 'Hauptstrasse',
                    'street_number' => 1,
                    'street_number_add' => 'b',
                    'city' => 'Testhausen',
                    'zip' => 12345
                )
            )
        );

        $check = array(
            'id' => 1,
            'name' => 'Ein Testartikel',
            'description' => 'Dies ist ein Testartikel mit möglichst vielen Attributen, um die Performance der recursiven Funktion zu testen.',
            'tags' => array(
                'test-changed',
                'phpunit-changed',
                'eCommerce-changed',
                'array-changed',
                'recursive-changed'
            ),
            'categories' => array(
                array(
                    'name' => 'Möbel-changed',
                    'childes' => array(
                        array(
                            'name' => 'Tische',
                            'childes' => array(
                                array(
                                    'name' => 'Esstische'
                                ),
                            )
                        ),
                        array(
                            'name' => 'Schränke',
                            'childes' => array(
                                array(
                                    'name' => 'Kommode'
                                )
                            )
                        )
                    )
                )
            ),
            'manufacturer' => array(
                'name' => 'Möbelfabrik',
                'address' => array(
                    'street' => 'Hauptstrasse',
                    'street_number' => 1,
                    'street_number_add' => 'b',
                    'city' => 'Testhausen-changed',
                    'zip' => 12345
                )
            )
        );

        $this->object->setOptions(array(
            'site_to_alter' => 'source',
            'attributes_to_alter' => array(
                'tags',
                'categories',
                'manufacturer::address::city'
            )
        ));

        $e = new ConnectorEvent(ConnectorEvent::EVENT_MAP_ITEM);
        $e->setItem($item);
        $e->setSource(new DocumentSource(2, 'DocumentSource', '/document-source', 'MockObject'));
        $this->object->onMapItem($e);

        $this->assertEquals($check, $e->getItem());
    }
}

?>
