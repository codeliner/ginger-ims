<?php
namespace Ginger\Repository;

use Cl\Test\DoctrineTestCase;
use Ginger\Model\Connector\Connector;
use Ginger\Job\Job;
use Ginger\Model\Configuration\ConnectorConfiguration;
use Ginger\Entity\Job as JobEntity;
use Ginger\Entity\Configuration as ConfigEntity;
use MockObject\Source;
use MockObject\Target;
use MockObject\Logger;
use MockObject\SourceLoader;
use MockObject\TargetLoader;
use MockObject\MapperLoader;
use Doctrine\Common\Collections\ArrayCollection;
/**
 * Test class for JobRepository.
 * Generated by PHPUnit on 2013-04-06 at 00:47:26.
 */
class JobRepositoryTest extends DoctrineTestCase
{

    /**
     * @var JobRepository
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->createEntitySchema('Ginger\Entity\Job');
        $this->createEntitySchema('Ginger\Entity\Configuration');

        $this->object = $this->getTestEntityManager()->getRepository('Ginger\Entity\Job');

        $this->object->setConnector(new Connector());

        $logger = new Logger();
        $this->object->setLogger($logger);
        $this->object->setSourceLoader(new SourceLoader());
        $this->object->setTargetLoader(new TargetLoader());
        $this->object->setMapperLoader(new MapperLoader());

        $emptyJob = new JobEntity();
        $emptyJob->setName('empty_job');

        $this->getTestEntityManager()->persist($emptyJob);
        $this->getTestEntityManager()->flush($emptyJob);

        $configuredJob = new JobEntity();
        $configuredJob->setName('configured_job');
        $configuredJob->setDescription('this is a configured job');

        $config = new ConnectorConfiguration();
        $config->setSource(new Source(1, "testsource", "/testsource", "MockObject"));
        $config->setTarget(new Target(1, "testtarget", "/testtarget", "MockObject"));

        $configEntity = new ConfigEntity();
        $configEntity->setConfig($config->serialize());

        $configuredJob->setConfigurations(new ArrayCollection(array($configEntity)));

        $this->getTestEntityManager()->persist($configuredJob);
        $this->getTestEntityManager()->flush($configuredJob);
    }

    /**
     * @covers Ginger\Repository\JobRepository::getJobNames
     */
    public function testGetJobNames()
    {
        $jobNames = $this->object->getJobNames();

        $check = array(
            'empty_job',
            'configured_job'
        );

        $this->assertEquals($check, $jobNames);
    }

    /**
     * @covers Ginger\Repository\JobRepository::loadJob
     */
    public function testLoadJob()
    {
        $job = $this->object->loadJob('configured_job');

        $this->assertEquals('configured_job', $job->getName());
        $this->assertInstanceOf('MockObject\Logger', $job->getLogger());
        $this->assertInstanceOf('Ginger\Model\Connector\Connector', $job->getConcector());
        $this->assertTrue($job->getBreakOnFailure());
        $this->assertInstanceOf('MockObject\Source', $job->getConfigurations()[0]->getSource());
        $this->assertEquals('this is a configured job', $job->getDescription());
    }

    /**
     * @covers Ginger\Repository\JobRepository::saveJob
     */
    public function testSaveJob()
    {
        $job = new Job('saved_job');
        $job->setDescription('this is a testjob');
        $job->setBreakOnFailure(false);

        $config = new ConnectorConfiguration();

        $source = new Source(1, "testsource", "/testsource", "MockObject");
        $source->setOptions(array('foo' => 'bar'));
        $target = new Target(1, "testtarget", "/testtarget", "MockObject");
        $target->setOptions(array('baz' => 'bat'));

        $config->setSource($source);
        $config->setTarget($target);

        $job->addConfiguration($config);

        $this->object->saveJob($job);

        $this->getTestEntityManager()->clear();

        $jobCheck = $this->object->loadJob('saved_job');

        $this->assertEquals('saved_job', $jobCheck->getName());
        $this->assertInstanceOf('MockObject\Logger', $jobCheck->getLogger());
        $this->assertInstanceOf('Ginger\Model\Connector\Connector', $jobCheck->getConcector());
        $this->assertFalse($jobCheck->getBreakOnFailure());
        $this->assertInstanceOf('MockObject\Source', $jobCheck->getConfigurations()[0]->getSource());
        $this->assertEquals('bar', $jobCheck->getConfigurations()[0]->getSource()->getOptions()['foo']);
        $this->assertEquals('this is a testjob', $jobCheck->getDescription());
    }

    public function testHasJob()
    {
        $this->assertTrue($this->object->hasJob('configured_job'));
        $this->assertFalse($this->object->hasJob('unknown_job'));
    }
}
