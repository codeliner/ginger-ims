<?php
namespace Ginger\Job;

use Cl\Test\PHPUnitTestCase;
use Zend\EventManager\EventManager;
use Ginger\Model\Connector\Connector;
use Ginger\Model\Configuration\ConnectorConfiguration;

/**
 * Test class for Job.
 * Generated by PHPUnit on 2013-04-05 at 12:31:41.
 */
class JobTest extends PHPUnitTestCase
{

    /**
     * @var Job
     */
    protected $object;

    /**
     *
     * @var \MockObject\Logger
     */
    protected $logger;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Job('testjob');

        $this->logger = new \MockObject\Logger();
        $this->object->setLogger($this->logger);
        $connector = new Connector();
        $connector->setEventManager(new EventManager());
        $this->object->setConcector($connector);
        $this->object->setTranslator(static::getApplication()->getServiceManager()->get('translator'));
    }

    protected function getConfig($configId)
    {
        $config = new ConnectorConfiguration();
        $config->setId(1);
        $config->setSource(new \MockObject\Source($configId, "testsource".$configId, "/testsource".$configId, "MockObject"));
        $config->setTarget(new \MockObject\Target($configId, "testtarget".$configId, "/testtarget".$configId, "MockObject"));
        $config->setSourceLoader(new \MockObject\SourceLoader());
        $config->setTargetLoader(new \MockObject\TargetLoader());
        $config->setMapperLoader(new \MockObject\MapperLoader());

        return $config;
    }

    protected function getLogMessages($messages, $type = null) {

        $messageTexts = array();

        foreach ($messages as $message) {
            if (is_null($type) || $type == $message->getType()) {
                $messageTexts[] = $message->getText();
            }
        }

        return $messageTexts;
    }

    /**
     * @covers Ginger\Job\Job::getName
     */
    public function testGetName()
    {
        $this->assertEquals('testjob', $this->object->getName());
    }

    /**
     * @covers Ginger\Job\Job::getConcector
     */
    public function testGetConcector()
    {
        $this->assertInstanceOf('Ginger\Model\Connector\Connector', $this->object->getConcector());
    }

    /**
     * @covers Ginger\Job\Job::getLogger
     */
    public function testGetLogger()
    {
        $this->assertInstanceOf('\MockObject\Logger', $this->object->getLogger());
    }

    /**
     * @covers Ginger\Job\Job::getConfigurations
     */
    public function testGetConfigurations()
    {
        $this->assertEquals(0, count($this->object->getConfigurations()));

        $config = $this->getConfig(1);

        $this->object->setConfigurations(array($config));

        $this->assertEquals(1, count($this->object->getConfigurations()));
        $this->assertEquals($config, $this->object->getConfigurations()[0]);
    }

    /**
     * @covers Ginger\Job\Job::addConfiguration
     */
    public function testAddConfiguration()
    {
        $this->assertEquals(0, count($this->object->getConfigurations()));

        $config = $this->getConfig(1);

        $this->object->addConfiguration($config);

        $this->assertEquals(1, count($this->object->getConfigurations()));
        $this->assertEquals($config, $this->object->getConfigurations()[0]);
    }

    /**
     * @covers Ginger\Job\Job::getBreakOnFailure
     */
    public function testGetBreakOnFailure()
    {
        $this->assertTrue($this->object->getBreakOnFailure());
    }

    /**
     * @covers Ginger\Job\Job::setBreakOnFailure
     */
    public function testSetBreakOnFailure()
    {
        $this->object->setBreakOnFailure(false);
        $this->assertFalse($this->object->getBreakOnFailure());
    }

    /**
     * @covers Ginger\Job\Job::run
     */
    public function testSuccessfulRun()
    {
        $config = $this->getConfig(1);

        $this->object->addConfiguration($config);

        $success = $this->object->run();

        $this->assertTrue($success);

        $checkMessages = array(
            "insert is started",
            "item: item1 is written",
            "item: item2 is written",
            "item: item3 is written",
            "insert is finished",
        );

        $jobRun = $this->logger->getJobRun(0);
        $configRun = $jobRun->getConfigurationRuns()[0];

        $this->assertInstanceOf("DateTime", $jobRun->getStartTime());
        $this->assertInstanceOf("DateTime", $jobRun->getEndTime());
        $this->assertTrue($jobRun->getSuccess());
        $this->assertInstanceOf("DateTime", $configRun->getStartTime());
        $this->assertInstanceOf("DateTime", $configRun->getEndTime());
        $this->assertTrue($configRun->getSuccess());
        $this->assertEquals($checkMessages, $this->getLogMessages($configRun->getMessages()));
    }

    public function testBreakRunWithFailure()
    {
        $failureConfig = $this->getConfig(2);

        $failureConfig->setMapper(new \MockObject\MapperWithError(2, "errormapper", "/errormapper", "MockObject"));

        $successConfig = $this->getConfig(1);

        $this->object->setConfigurations(array($failureConfig, $successConfig));

        $success = $this->object->run();

        $this->assertFalse($success);

        $checkMessages = array(
            'insert is started',
            'item: item1Mapped is written',
            "Can not map item 2.",
            "Der Job wurde abgebrochen, da eine Aufgabe fehlgeschlagen ist.",
        );

        $jobRun = $this->logger->getJobRun(0);

        $messageTexts = array();

        foreach($jobRun->getConfigurationRuns() as $configRun) {
            $partTexts = $this->getLogMessages($configRun->getMessages());
            $messageTexts = array_merge($messageTexts, $partTexts);
        }

        $this->assertEquals($checkMessages, $messageTexts);

        $this->assertInstanceOf("DateTime", $jobRun->getStartTime());
        $this->assertInstanceOf("DateTime", $jobRun->getEndTime());
        $this->assertFalse($jobRun->getSuccess());

        $configRun1 = $jobRun->getConfigurationRuns()[0];
        $this->assertInstanceOf("DateTime", $configRun1->getStartTime());
        $this->assertInstanceOf("DateTime", $configRun1->getEndTime());
        $this->assertFalse($configRun1->getSuccess());
        $this->assertEquals(3, $configRun1->getTotalItemCount());
        $this->assertEquals(1, $configRun1->getInsertedItemCount());

        
        $this->assertFalse(isset($jobRun->getConfigurationRuns()[1]));
    }

    public function testNotBreakRunWithFailure()
    {
        $failureConfig = $this->getConfig(2);

        $failureConfig->setMapper(new \MockObject\MapperWithError(2, "errormapper", "/errormapper", "MockObject"));

        $successConfig = $this->getConfig(1);

        $this->object->setConfigurations(array($failureConfig, $successConfig));

        $this->object->setBreakOnFailure(false);

        $success = $this->object->run();

        $this->assertTrue($success);

        $fullMessageStack = array(
            "insert is started",
            "item: item1Mapped is written",
            "Can not map item 2.",
            "insert is started",
            "item: item1 is written",
            "item: item2 is written",
            "item: item3 is written",
            "insert is finished",
        );

        $jobRun = $this->logger->getJobRun(0);

        $messageTexts = array();

        foreach($jobRun->getConfigurationRuns() as $configRun) {
            $partTexts = $this->getLogMessages($configRun->getMessages());
            $messageTexts = array_merge($messageTexts, $partTexts);
        }

        $this->assertEquals($fullMessageStack, $messageTexts);

        $checkErrors = array(
            "Can not map item 2.",
        );

        $messageTexts = array();

        foreach($jobRun->getConfigurationRuns() as $configRun) {
            $partTexts = $this->getLogMessages($configRun->getMessages(), "error");
            $messageTexts = array_merge($messageTexts, $partTexts);
        }

        $this->assertEquals($checkErrors, $messageTexts);

        $this->assertInstanceOf("DateTime", $jobRun->getStartTime());
        $this->assertInstanceOf("DateTime", $jobRun->getEndTime());
        $this->assertTrue($jobRun->getSuccess());

        $configRun1 = $jobRun->getConfigurationRuns()[0];
        $this->assertInstanceOf("DateTime", $configRun1->getStartTime());
        $this->assertInstanceOf("DateTime", $configRun1->getEndTime());
        $this->assertFalse($configRun1->getSuccess());
        $this->assertEquals(3, $configRun1->getTotalItemCount());
        $this->assertEquals(1, $configRun1->getInsertedItemCount());

        $configRun2 = $jobRun->getConfigurationRuns()[1];
        $this->assertInstanceOf("DateTime", $configRun2->getStartTime());
        $this->assertInstanceOf("DateTime", $configRun2->getEndTime());
        $this->assertTrue($configRun2->getSuccess());
        $this->assertEquals(3, $configRun2->getTotalItemCount());
        $this->assertEquals(3, $configRun2->getInsertedItemCount());
    }

    public function testHandlingOfFeatures()
    {
        $config = $this->getConfig(1);

        $feature = new \MockObject\ValueChangeFeature(1, 'ValueChangeFeature', '/value-change-feature', 'MockObject');
        $feature->setOptions(array(
            'site_to_alter' => 'source',
            'attributes_to_alter' => array(
                'name'
            )
        ));
        $source = new \MockObject\DocumentSource(2, 'DocumentSource', '/document-source', 'MockObject');
        $source->setData(array(
            array(
                'name' => 'item1'
            )
        ));
        $target = new \MockObject\EasyTarget(2, 'EasyTarget', '/easy-target', 'MockObject');
        $config->addFeature($feature);
        $config->setSource($source);
        $config->setTarget($target);

        $this->object->addConfiguration($config);

        $success = $this->object->run();

        $this->assertTrue($success);

        $check = array(
            array(
                'name' => 'item1-changed'
            )
        );

        $this->assertEquals($check, $target->getItems());

        //check that feature is detatched after run
        $config = $this->getConfig(1);

        $this->object->setConfigurations(array($config));

        $success = $this->object->run();

        $this->assertTrue($success);

        $checkMessages = array(
            "insert is started",
            "item: item1 is written",
            "item: item2 is written",
            "item: item3 is written",
            "insert is finished",
        );

        $jobRun = $this->logger->getJobRun(1);
        $configRun = $jobRun->getConfigurationRuns()[0];

        $this->assertEquals($checkMessages, $this->getLogMessages($configRun->getMessages()));
    }
}